{
	"info": {
		"_postman_id": "e4527126-75f5-4bee-b20c-828b679a2c39",
		"name": "User_rating_bot Api Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Posititve tests",
			"item": [
				{
					"name": "User",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Добавить пользователя\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");\r",
											"    \r",
											"    pm.collectionVariables.set(\"tg_user_id\", Number(request.data.tg_user_id))\r",
											"    pm.collectionVariables.set(\"first_name\", request.data.first_name)\r",
											"    pm.collectionVariables.set(\"last_name\", request.data.last_name)\r",
											"    pm.collectionVariables.set(\"username\", request.data.username)\r",
											"\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.id).to.be.not.undefined\r",
											"\r",
											"    pm.environment.set(\"newUserTgId\",  Number(request.data.tg_user_id));\r",
											"    pm.environment.set(\"newUserId\", response.id);\r",
											"    console.log('New user id:')\r",
											"    console.log(pm.environment.get(\"newUserId\"))\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "tg-user-id",
										"value": "123123",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "tg_user_id",
											"value": "100",
											"type": "text"
										},
										{
											"key": "first_name",
											"value": "Test Name",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "Test last_name",
											"type": "text"
										},
										{
											"key": "username",
											"value": "testuser",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Получение списка пользователей\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");\r",
											"    \r",
											"    const tg_user_id = pm.collectionVariables.get(\"tg_user_id\")\r",
											"    const first_name = pm.collectionVariables.get(\"first_name\")\r",
											"    const last_name = pm.collectionVariables.get(\"last_name\")\r",
											"    const username = pm.collectionVariables.get(\"username\")\r",
											"\r",
											"    const response = pm.response.json(); \r",
											"    const new_user_id = pm.environment.get(\"newUserId\")\r",
											"           \r",
											"    pm.expect(response).to.be.an(\"array\")\r",
											"    const new_user = _.find(response, { \"id\": new_user_id })\r",
											"    pm.expect(new_user).to.be.not.undefined\r",
											"    pm.expect(new_user.tg_user_id).to.eq(tg_user_id)\r",
											"    pm.expect(new_user.first_name).to.eq(first_name)\r",
											"    pm.expect(new_user.last_name).to.eq(last_name)\r",
											"    pm.expect(new_user.username).to.eq(username)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Получение пользователя\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");\r",
											"\r",
											"    const response = pm.response.json(); \r",
											"\r",
											"    const tg_user_id = Number(pm.collectionVariables.get(\"tg_user_id\"))\r",
											"    const first_name = pm.collectionVariables.get(\"first_name\")\r",
											"    const last_name = pm.collectionVariables.get(\"last_name\")\r",
											"    const username = pm.collectionVariables.get(\"username\")\r",
											"           \r",
											"    pm.expect(response.tg_user_id).to.eq(tg_user_id)\r",
											"    pm.expect(response.first_name).to.eq(first_name)\r",
											"    pm.expect(response.last_name).to.eq(last_name)\r",
											"    pm.expect(response.username).to.eq(username)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/users/{{newUserId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"{{newUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user by tg_user_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Получение пользователя по tg_user_id\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");\r",
											"    \r",
											"    const tg_user_id = pm.collectionVariables.get(\"tg_user_id\")\r",
											"    const first_name = pm.collectionVariables.get(\"first_name\")\r",
											"    const last_name = pm.collectionVariables.get(\"last_name\")\r",
											"    const username = pm.collectionVariables.get(\"username\")\r",
											"\r",
											"    const response = pm.response.json(); \r",
											"    const new_user_id = pm.environment.get(\"newUserId\")\r",
											"    pm.expect(response).to.be.not.undefined\r",
											"    pm.expect(response.id).to.eq(new_user_id)\r",
											"    pm.expect(response.tg_user_id).to.eq(tg_user_id)\r",
											"    pm.expect(response.first_name).to.eq(first_name)\r",
											"    pm.expect(response.last_name).to.eq(last_name)\r",
											"    pm.expect(response.username).to.eq(username)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/users?tg-user-id={{newUserTgId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									],
									"query": [
										{
											"key": "tg-user-id",
											"value": "{{newUserTgId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Обновление пользователя\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");\r",
											"\r",
											"    const response = pm.response.json(); \r",
											"    const tg_user_id = Number(request.data.tg_user_id)\r",
											"    const first_name = request.data.first_name\r",
											"    const last_name = request.data.last_name\r",
											"    const username = request.data.username\r",
											"           \r",
											"    pm.expect(response.tg_user_id).to.eq(tg_user_id)\r",
											"    pm.expect(response.first_name).to.eq(first_name)\r",
											"    pm.expect(response.last_name).to.eq(last_name)\r",
											"    pm.expect(response.username).to.eq(username)\r",
											"\r",
											"    pm.collectionVariables.set(\"tg_user_id\", Number(request.data.tg_user_id))\r",
											"    pm.collectionVariables.set(\"first_name\", request.data.first_name)\r",
											"    pm.collectionVariables.set(\"last_name\", request.data.last_name)\r",
											"    pm.collectionVariables.set(\"username\", request.data.username)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "tg-user-id",
										"value": "123123",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "tg_user_id",
											"value": "100",
											"type": "text"
										},
										{
											"key": "first_name",
											"value": "ivan",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "ivanov",
											"type": "text"
										},
										{
											"key": "username",
											"value": "iviv",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/users/{{newUserId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"{{newUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users after update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Получение списка пользователей\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");\r",
											"    \r",
											"    const tg_user_id = pm.collectionVariables.get(\"tg_user_id\")\r",
											"    const first_name = pm.collectionVariables.get(\"first_name\")\r",
											"    const last_name = pm.collectionVariables.get(\"last_name\")\r",
											"    const username = pm.collectionVariables.get(\"username\")\r",
											"\r",
											"    const response = pm.response.json(); \r",
											"    const new_user_id = pm.environment.get(\"newUserId\")\r",
											"           \r",
											"    pm.expect(response).to.be.an(\"array\")\r",
											"    const new_user = _.find(response, { \"id\": new_user_id })\r",
											"    pm.expect(new_user).to.be.not.undefined\r",
											"    pm.expect(new_user.tg_user_id).to.eq(tg_user_id)\r",
											"    pm.expect(new_user.first_name).to.eq(first_name)\r",
											"    pm.expect(new_user.last_name).to.eq(last_name)\r",
											"    pm.expect(new_user.username).to.eq(username)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user after update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Получение пользователя\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");\r",
											"\r",
											"    const response = pm.response.json(); \r",
											"\r",
											"    const tg_user_id = Number(pm.collectionVariables.get(\"tg_user_id\"))\r",
											"    const first_name = pm.collectionVariables.get(\"first_name\")\r",
											"    const last_name = pm.collectionVariables.get(\"last_name\")\r",
											"    const username = pm.collectionVariables.get(\"username\")\r",
											"           \r",
											"    pm.expect(response.tg_user_id).to.eq(tg_user_id)\r",
											"    pm.expect(response.first_name).to.eq(first_name)\r",
											"    pm.expect(response.last_name).to.eq(last_name)\r",
											"    pm.expect(response.username).to.eq(username)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/users/{{newUserId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"{{newUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Удаление пользователя\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"    pm.expect(pm.response.headers.get(\"Content-Length\")).to.be.eq('0')\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/users/{{newUserId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"{{newUserId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Answer",
					"item": [
						{
							"name": "Create user answer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Добавить ответ\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");\r",
											"    \r",
											"    pm.collectionVariables.set(\"user_id\", Number(request.data.user_id))\r",
											"    pm.collectionVariables.set(\"answer\", request.data.answer)\r",
											"    pm.collectionVariables.set(\"likes_num\", Number(request.data.likes_num))\r",
											"    pm.collectionVariables.set(\"dislikes_num\", Number(request.data.dislikes_num))\r",
											"    pm.collectionVariables.set(\"best_answer\", request.data.best_answer === 'True')\r",
											"\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.id).to.be.not.undefined\r",
											"\r",
											"    pm.environment.set(\"newAnswerId\", response.id);\r",
											"\r",
											"    const best_answer = pm.collectionVariables.get(\"best_answer\")\r",
											"    console.log(\"best_answer\", best_answer)\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "user_id",
											"value": "3",
											"type": "text"
										},
										{
											"key": "answer",
											"value": "[f'{key}: {val}' for key, val in d.items()]",
											"type": "text"
										},
										{
											"key": "likes_num",
											"value": "0",
											"type": "text"
										},
										{
											"key": "dislikes_num",
											"value": "1",
											"type": "text"
										},
										{
											"key": "best_answer",
											"value": "False",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user_answers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user_answers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user answers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Получение списка ответов\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");\r",
											"    \r",
											"    const user_id = pm.collectionVariables.get(\"user_id\")\r",
											"    const answer = pm.collectionVariables.get(\"answer\")\r",
											"    const likes_num = pm.collectionVariables.get(\"likes_num\")\r",
											"    const dislikes_num = pm.collectionVariables.get(\"dislikes_num\")\r",
											"    const best_answer = pm.collectionVariables.get(\"best_answer\")\r",
											"\r",
											"    const response = pm.response.json(); \r",
											"    const new_answer_id = pm.environment.get(\"newAnswerId\")\r",
											"           \r",
											"    pm.expect(response).to.be.an(\"array\")\r",
											"    const new_answer = _.find(response, { \"id\": new_answer_id })\r",
											"    pm.expect(new_answer).to.be.not.undefined\r",
											"    pm.expect(new_answer.user_id).to.eq(user_id)\r",
											"    pm.expect(new_answer.answer).to.eq(answer)\r",
											"    pm.expect(new_answer.likes_num).to.eq(likes_num)\r",
											"    pm.expect(new_answer.dislikes_num).to.eq(dislikes_num)\r",
											"    pm.expect(new_answer.best_answer).to.eq(best_answer)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "user-id",
										"value": "3",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user_answers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user_answers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get answer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Получение ответа\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");\r",
											"\r",
											"    const response = pm.response.json(); \r",
											"\r",
											"    const user_id = pm.collectionVariables.get(\"user_id\")\r",
											"    const answer = pm.collectionVariables.get(\"answer\")\r",
											"    const likes_num = pm.collectionVariables.get(\"likes_num\")\r",
											"    const dislikes_num = pm.collectionVariables.get(\"dislikes_num\")\r",
											"    const best_answer = pm.collectionVariables.get(\"best_answer\")\r",
											"\r",
											"    pm.expect(response.user_id).to.eq(user_id)\r",
											"    pm.expect(response.answer).to.eq(answer)\r",
											"    pm.expect(response.likes_num).to.eq(likes_num)\r",
											"    pm.expect(response.dislikes_num).to.eq(dislikes_num)\r",
											"    pm.expect(response.best_answer).to.eq(best_answer)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user_answers/{{newAnswerId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user_answers",
										"{{newAnswerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user answer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Обновление ответа\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");\r",
											"\r",
											"    const response = pm.response.json(); \r",
											"    const user_id = Number(request.data.user_id)\r",
											"    const answer = request.data.answer\r",
											"    const likes_num = Number(request.data.likes_num)\r",
											"    const dislikes_num = Number(request.data.dislikes_num)\r",
											"    const best_answer = request.data.best_answer === 'true'\r",
											"    \r",
											"    pm.expect(response.user_id).to.eq(user_id)\r",
											"    pm.expect(response.answer).to.eq(answer)\r",
											"    pm.expect(response.likes_num).to.eq(likes_num)\r",
											"    pm.expect(response.dislikes_num).to.eq(dislikes_num)\r",
											"    pm.expect(response.best_answer).to.eq(best_answer)\r",
											"\r",
											"    pm.collectionVariables.set(\"user_id\", Number(request.data.user_id))\r",
											"    pm.collectionVariables.set(\"answer\", request.data.answer)\r",
											"    pm.collectionVariables.set(\"likes_num\", Number(request.data.likes_num))\r",
											"    pm.collectionVariables.set(\"dislikes_num\", Number(request.data.dislikes_num))\r",
											"    pm.collectionVariables.set(\"best_answer\", request.data.best_answer === 'True')\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "user_id",
											"value": "3",
											"type": "text"
										},
										{
											"key": "answer",
											"value": "updated answer",
											"type": "text"
										},
										{
											"key": "likes_num",
											"value": "10",
											"type": "text"
										},
										{
											"key": "dislikes_num",
											"value": "6",
											"type": "text"
										},
										{
											"key": "best_answer",
											"value": "False",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user_answers/{{newAnswerId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user_answers",
										"{{newAnswerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user answers after update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Получение списка ответов\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");\r",
											"    \r",
											"    const user_id = pm.collectionVariables.get(\"user_id\")\r",
											"    const answer = pm.collectionVariables.get(\"answer\")\r",
											"    const likes_num = pm.collectionVariables.get(\"likes_num\")\r",
											"    const dislikes_num = pm.collectionVariables.get(\"dislikes_num\")\r",
											"    const best_answer = pm.collectionVariables.get(\"best_answer\")\r",
											"\r",
											"    const response = pm.response.json(); \r",
											"    const new_answer_id = pm.environment.get(\"newAnswerId\")\r",
											"           \r",
											"    pm.expect(response).to.be.an(\"array\")\r",
											"    const new_answer = _.find(response, { \"id\": new_answer_id })\r",
											"    pm.expect(new_answer).to.be.not.undefined\r",
											"    pm.expect(new_answer.user_id).to.eq(user_id)\r",
											"    pm.expect(new_answer.answer).to.eq(answer)\r",
											"    pm.expect(new_answer.likes_num).to.eq(likes_num)\r",
											"    pm.expect(new_answer.dislikes_num).to.eq(dislikes_num)\r",
											"    pm.expect(new_answer.best_answer).to.eq(best_answer)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "user-id",
										"value": "3",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user_answers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user_answers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get answer after update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Получение ответа\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");\r",
											"\r",
											"    const response = pm.response.json(); \r",
											"\r",
											"    const user_id = pm.collectionVariables.get(\"user_id\")\r",
											"    const answer = pm.collectionVariables.get(\"answer\")\r",
											"    const likes_num = pm.collectionVariables.get(\"likes_num\")\r",
											"    const dislikes_num = pm.collectionVariables.get(\"dislikes_num\")\r",
											"    const best_answer = pm.collectionVariables.get(\"best_answer\")\r",
											"\r",
											"    pm.expect(response.user_id).to.eq(user_id)\r",
											"    pm.expect(response.answer).to.eq(answer)\r",
											"    pm.expect(response.likes_num).to.eq(likes_num)\r",
											"    pm.expect(response.dislikes_num).to.eq(dislikes_num)\r",
											"    pm.expect(response.best_answer).to.eq(best_answer)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user_answers/{{newAnswerId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user_answers",
										"{{newAnswerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete answer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Удаление ответа\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"    pm.expect(pm.response.headers.get(\"Content-Length\")).to.be.eq('0')\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user_answers/{{newAnswerId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user_answers",
										"{{newAnswerId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Question",
					"item": [
						{
							"name": "Create user question",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Добавить вопрос\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");\r",
											"    \r",
											"    pm.collectionVariables.set(\"user_id\", Number(request.data.user_id))\r",
											"    pm.collectionVariables.set(\"question\", request.data.question)\r",
											"    pm.collectionVariables.set(\"likes_num\", Number(request.data.likes_num))\r",
											"    pm.collectionVariables.set(\"dislikes_num\", Number(request.data.dislikes_num))\r",
											"    pm.collectionVariables.set(\"has_an_answer\", request.data.has_an_answer === 'True')\r",
											"\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.id).to.be.not.undefined\r",
											"\r",
											"    pm.environment.set(\"newQuestionId\", response.id);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "user_id",
											"value": "3",
											"type": "text"
										},
										{
											"key": "question",
											"value": "как выучить с++ за 21 день?",
											"type": "text"
										},
										{
											"key": "likes_num",
											"value": "3",
											"type": "text"
										},
										{
											"key": "dislikes_num",
											"value": "1",
											"type": "text"
										},
										{
											"key": "has_an_answer",
											"value": "False",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user_questions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user_questions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user questions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Получение списка вопросов\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");\r",
											"    \r",
											"    const user_id = pm.collectionVariables.get(\"user_id\")\r",
											"    const question = pm.collectionVariables.get(\"question\")\r",
											"    const likes_num = pm.collectionVariables.get(\"likes_num\")\r",
											"    const dislikes_num = pm.collectionVariables.get(\"dislikes_num\")\r",
											"    const has_an_answer = pm.collectionVariables.get(\"has_an_answer\")\r",
											"\r",
											"    const response = pm.response.json(); \r",
											"    const new_question_id = pm.environment.get(\"newQuestionId\")\r",
											"           \r",
											"    pm.expect(response).to.be.an(\"array\")\r",
											"    const new_question = _.find(response, { \"id\": new_question_id })\r",
											"    pm.expect(new_question).to.be.not.undefined\r",
											"    pm.expect(new_question.user_id).to.eq(user_id)\r",
											"    pm.expect(new_question.question).to.eq(question)\r",
											"    pm.expect(new_question.likes_num).to.eq(likes_num)\r",
											"    pm.expect(new_question.dislikes_num).to.eq(dislikes_num)\r",
											"    pm.expect(new_question.has_an_answer).to.eq(has_an_answer)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "user-id",
										"value": "3",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user_questions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user_questions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get question",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Получение вопроса\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");\r",
											"\r",
											"    const response = pm.response.json(); \r",
											"\r",
											"    const user_id = pm.collectionVariables.get(\"user_id\")\r",
											"    const question = pm.collectionVariables.get(\"question\")\r",
											"    const likes_num = pm.collectionVariables.get(\"likes_num\")\r",
											"    const dislikes_num = pm.collectionVariables.get(\"dislikes_num\")\r",
											"    const has_an_answer = pm.collectionVariables.get(\"has_an_answer\")\r",
											"\r",
											"    pm.expect(response.user_id).to.eq(user_id)\r",
											"    pm.expect(response.question).to.eq(question)\r",
											"    pm.expect(response.likes_num).to.eq(likes_num)\r",
											"    pm.expect(response.dislikes_num).to.eq(dislikes_num)\r",
											"    pm.expect(response.has_an_answer).to.eq(has_an_answer)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user_questions/{{newQuestionId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user_questions",
										"{{newQuestionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user question",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Обновление ответа\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");\r",
											"\r",
											"    const response = pm.response.json(); \r",
											"    const user_id = Number(request.data.user_id)\r",
											"    const question = request.data.question\r",
											"    const likes_num = Number(request.data.likes_num)\r",
											"    const dislikes_num = Number(request.data.dislikes_num)\r",
											"    const has_an_answer = request.data.has_an_answer === 'True'\r",
											"    \r",
											"    pm.expect(response.user_id).to.eq(user_id)\r",
											"    pm.expect(response.question).to.eq(question)\r",
											"    pm.expect(response.likes_num).to.eq(likes_num)\r",
											"    pm.expect(response.dislikes_num).to.eq(dislikes_num)\r",
											"    pm.expect(response.has_an_answer).to.eq(has_an_answer)\r",
											"\r",
											"    pm.collectionVariables.set(\"user_id\", Number(request.data.user_id))\r",
											"    pm.collectionVariables.set(\"question\", request.data.question)\r",
											"    pm.collectionVariables.set(\"likes_num\", Number(request.data.likes_num))\r",
											"    pm.collectionVariables.set(\"dislikes_num\", Number(request.data.dislikes_num))\r",
											"    pm.collectionVariables.set(\"has_an_answer\", request.data.has_an_answer === 'True')\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "user_id",
											"value": "3",
											"type": "text"
										},
										{
											"key": "question",
											"value": "как выучить с++ за 10 дней?",
											"type": "text"
										},
										{
											"key": "likes_num",
											"value": "10",
											"type": "text"
										},
										{
											"key": "dislikes_num",
											"value": "2",
											"type": "text"
										},
										{
											"key": "has_an_answer",
											"value": "True",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user_questions/{{newQuestionId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user_questions",
										"{{newQuestionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user questions after update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Получение списка вопросов\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");\r",
											"    \r",
											"    const user_id = pm.collectionVariables.get(\"user_id\")\r",
											"    const question = pm.collectionVariables.get(\"question\")\r",
											"    const likes_num = pm.collectionVariables.get(\"likes_num\")\r",
											"    const dislikes_num = pm.collectionVariables.get(\"dislikes_num\")\r",
											"    const has_an_answer = pm.collectionVariables.get(\"has_an_answer\")\r",
											"\r",
											"    const response = pm.response.json(); \r",
											"    const new_question_id = pm.environment.get(\"newQuestionId\")\r",
											"           \r",
											"    pm.expect(response).to.be.an(\"array\")\r",
											"    const new_question = _.find(response, { \"id\": new_question_id })\r",
											"    pm.expect(new_question).to.be.not.undefined\r",
											"    pm.expect(new_question.user_id).to.eq(user_id)\r",
											"    pm.expect(new_question.question).to.eq(question)\r",
											"    pm.expect(new_question.likes_num).to.eq(likes_num)\r",
											"    pm.expect(new_question.dislikes_num).to.eq(dislikes_num)\r",
											"    pm.expect(new_question.has_an_answer).to.eq(has_an_answer)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "user-id",
										"value": "3",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user_questions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user_questions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get question after update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Получение вопроса\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");\r",
											"\r",
											"    const response = pm.response.json(); \r",
											"\r",
											"    const user_id = pm.collectionVariables.get(\"user_id\")\r",
											"    const question = pm.collectionVariables.get(\"question\")\r",
											"    const likes_num = pm.collectionVariables.get(\"likes_num\")\r",
											"    const dislikes_num = pm.collectionVariables.get(\"dislikes_num\")\r",
											"    const has_an_answer = pm.collectionVariables.get(\"has_an_answer\")\r",
											"\r",
											"    pm.expect(response.user_id).to.eq(user_id)\r",
											"    pm.expect(response.question).to.eq(question)\r",
											"    pm.expect(response.likes_num).to.eq(likes_num)\r",
											"    pm.expect(response.dislikes_num).to.eq(dislikes_num)\r",
											"    pm.expect(response.has_an_answer).to.eq(has_an_answer)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user_questions/{{newQuestionId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user_questions",
										"{{newQuestionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete question",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user_questions/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user_questions",
										"1"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "newUserId",
			"value": ""
		},
		{
			"key": "newUserId2",
			"value": ""
		},
		{
			"key": "tg_user_id",
			"value": ""
		},
		{
			"key": "first_name",
			"value": ""
		},
		{
			"key": "last_name",
			"value": ""
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "answer",
			"value": ""
		},
		{
			"key": "likes_num",
			"value": ""
		},
		{
			"key": "dislikes_num",
			"value": ""
		},
		{
			"key": "question",
			"value": ""
		},
		{
			"key": "has_an_answer",
			"value": ""
		},
		{
			"key": "best_answer",
			"value": ""
		}
	]
}